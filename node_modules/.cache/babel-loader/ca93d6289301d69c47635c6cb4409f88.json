{"ast":null,"code":"var _jsxFileName = \"C:\\\\npm\\\\repo2\\\\src\\\\Project.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Spring } from 'react-spring/renderprops';\nimport { postsFetched, getAllStatPostsImages } from \"./config/actions/index\";\nimport './style.css';\nlet lastScrollY = 0;\nlet ticking = false;\n\nconst openCardView = e => {\n  e.preventDefault();\n  setCardViewIsActive(!cardViewIsActive);\n  setSelectedIndex(+e.currentTarget.dataset.index);\n};\n\nexport class Project extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleScroll = () => {\n      lastScrollY = window.scrollY;\n\n      if (!ticking) {\n        window.requestAnimationFrame(() => {\n          //this.navRef.current.style.top = `${lastScrollY}px`;\n          console.log(this.navRef.current.style.top);\n          const styles = getComputedStyle(this.navRef.current); //console.log(styles) // rgb(0, 0, 0)\n\n          ticking = false;\n        });\n        ticking = true;\n      }\n    };\n\n    this.navRef = React.createRef();\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    console.log(this.props.images);\n    const spanStyles = {\n      color: \"#fff\",\n      borderColor: \"#00f\"\n    };\n    let styles = {\n      margin: '20px',\n      width: '250px',\n      height: '250px',\n      backgroundColor: \"yellow\"\n    };\n    const renderAuthButton = \"\";\n    return React.createElement(Spring, {\n      from: {\n        opacity: 0,\n        marginTop: -500\n      },\n      to: {\n        opacity: 1,\n        marginTop: 0\n      },\n      config: {\n        duration: 1000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, props => React.createElement(\"div\", {\n      style: props,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"      \", React.createElement(\"div\", {\n      ref: this.navRef,\n      className: \"container\",\n      style: {\n        backgroundColor: this.props.color,\n        position: \"relative\",\n        maxWidth: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-md-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        marginTop: '50px',\n        marginBottom: '50px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.props.title), React.createElement(\"div\", {\n      class: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"col-12 col-xs-6 col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: this.props.text\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"col-12 .col-xs-6 col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.images.map(function (object, i) {\n      return React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, object[0] == this.props.id && React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: object[1],\n        className: \"images\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: openCardView,\n        \"data-index\": i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"title-with-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, object.title), React.createElement(\"img\", {\n        className: \"grid-item picture-img\",\n        \"data-aos\": randChoice(animations),\n        src: object[1],\n        alt: \"nature1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }))));\n    }, this)))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    images: state.allposts.statPostImages\n  };\n};\n\nconst mapDispatchToProps = {\n  getAllStatPostsImages\n};\nexport const ProjectContainer = connect(mapStateToProps, mapDispatchToProps)(Project);","map":{"version":3,"sources":["C:/npm/repo2/src/Project.js"],"names":["React","Component","connect","Spring","postsFetched","getAllStatPostsImages","lastScrollY","ticking","openCardView","e","preventDefault","setCardViewIsActive","cardViewIsActive","setSelectedIndex","currentTarget","dataset","index","Project","constructor","props","handleScroll","window","scrollY","requestAnimationFrame","console","log","navRef","current","style","top","styles","getComputedStyle","createRef","state","email","password","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","images","spanStyles","color","borderColor","margin","width","height","backgroundColor","renderAuthButton","opacity","marginTop","duration","position","maxWidth","marginBottom","title","__html","text","map","object","i","id","randChoice","animations","mapStateToProps","allposts","statPostImages","mapDispatchToProps","ProjectContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {Spring} from 'react-spring/renderprops'\r\nimport { postsFetched,getAllStatPostsImages } from \"./config/actions/index\";\r\nimport './style.css';\r\nlet lastScrollY = 0;\r\nlet ticking = false;\r\nconst openCardView = (e) => {\r\n  e.preventDefault();\r\n  setCardViewIsActive(!cardViewIsActive);\r\n  setSelectedIndex(+e.currentTarget.dataset.index)};  \r\nexport class Project extends Component {\r\n  constructor(props) {\r\n    \r\n    super(props);\r\n    this.navRef = React.createRef();\r\n    this.state = {\r\n      email: '',\r\n      password: ''\r\n    };\r\n  }\r\n \r\n  componentDidMount(){\r\n  \r\n    window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n    componentWillUnmount() {\r\n      window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n    handleScroll = () => {\r\n      lastScrollY = window.scrollY;\r\n  \r\n      if (!ticking) {\r\n        window.requestAnimationFrame(() => {\r\n          //this.navRef.current.style.top = `${lastScrollY}px`;\r\n          console.log(this.navRef.current.style.top);\r\n          const styles = getComputedStyle(this.navRef.current)\r\n  \r\n          //console.log(styles) // rgb(0, 0, 0)\r\n         \r\n          ticking = false;\r\n        });\r\n     \r\n        ticking = true;\r\n      }\r\n    };\r\n   \r\n  render() {\r\n    console.log(this.props.images);\r\n    const spanStyles = {\r\n      color: \"#fff\",\r\n      borderColor: \"#00f\"\r\n    };\r\n      let styles = {\r\n        margin: '20px',\r\n        width: '250px',\r\n        height: '250px',\r\n        backgroundColor: \"yellow\",\r\n      };\r\n      const renderAuthButton=\"\";\r\n      \r\n    return (\r\n\r\n\r\n\r\n      <Spring\r\n  from={{ opacity: 0, marginTop: -500 }}\r\n  to={{ opacity: 1, marginTop: 0 }}\r\n  config={{duration:1000}}>\r\n    \r\n  {props => <div style={props}>      <div  ref={this.navRef} className=\"container\" style={{backgroundColor: this.props.color,position: \"relative\",maxWidth: '100%'}}>\r\n            <div className=\"row justify-content-md-center\">\r\n       <div className=\"col-12 \" >\r\n       <h1 style={{marginTop: '50px', marginBottom: '50px'}}>{this.props.title}</h1>\r\n    \r\n  \r\n    <div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-12 col-xs-6 col-md-6\">\r\n    <div dangerouslySetInnerHTML={{ __html: this.props.text }} />\r\n   \r\n    </div>\r\n    <div class=\"col-12 .col-xs-6 col-md-6\">\r\n    {this.props.images.map(function(object,i){\r\n\r\nreturn (\r\n\r\n<div className='col'>\r\n       {\r\n            object[0] ==this.props.id &&<div className='col'><img src={object[1]} className=\"images\" ></img></div>\r\n       \r\n       }\r\n       <button onClick={openCardView} data-index={i}>\r\n      <div className=\"grid-item\">\r\n        <h1 className=\"title-with-grid\">{object.title}</h1>\r\n        <img\r\n          className=\"grid-item picture-img\"\r\n          data-aos={randChoice(animations)}\r\n          src={object[1]}\r\n          alt=\"nature1\"\r\n        />\r\n      </div>\r\n    </button>\r\n    </div>)\r\n},this)}\r\n    </div>\r\n  </div></div>\r\n\r\n\r\n\r\n      \r\n \r\n\r\n  \r\n    \r\n </div>\r\n </div>\r\n </div></div>}\r\n</Spring>\r\n  \r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  \r\n  return {\r\n   \r\n    images: state.allposts.statPostImages\r\n  }\r\n};\r\nconst mapDispatchToProps = { getAllStatPostsImages };\r\n\r\nexport const ProjectContainer = connect(mapStateToProps, mapDispatchToProps)(Project);"]},"metadata":{},"sourceType":"module"}