{"ast":null,"code":"var _jsxFileName = \"C:\\\\npm\\\\moja\\\\src\\\\Edit.js\";\nimport React, { Component } from 'react';\nimport { postsFetched } from \"./config/actions/index\";\nimport { connect } from \"react-redux\";\nimport { storage, fire, base, firestore } from './config/Fire';\nexport class Edit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleImageAsFile = e => {\n      console.log(e.target.files[0].name);\n      const image = e.target.files[0];\n      this.setState({\n        file: image\n      });\n      console.log(this.state.image);\n    };\n\n    this.update = this.update.bind(this); // this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      file: '',\n      url: '',\n      imagePreviewUrl: '',\n      posts: {},\n      currentUser: null,\n      title: this.props.location.title,\n      text: this.props.location.text,\n      color: this.props.location.color\n    };\n  }\n\n  componentWillMount() {\n    this.postsRef = base.syncState('posts', {\n      context: this,\n      state: 'posts'\n    });\n  }\n\n  componentDidMount() {}\n\n  onprops() {\n    if (this.props.location.title != this.state.title) {\n      const title = this.props.location.title;\n      const text = this.props.location.text;\n      const color = this.props.location.color;\n      this.setState({\n        title: title\n      });\n      this.setState({\n        text: text\n      });\n      this.setState({\n        color: color\n      });\n      console.log(this.state.title);\n    }\n  }\n\n  handleChangeTitle(e) {\n    e.preventDefault();\n    const title = e.target.value;\n    this.setState({\n      title\n    });\n    console.log(this.state.title);\n  }\n\n  handleChangeText(e) {\n    e.preventDefault();\n    const text = e.target.value;\n    this.setState({\n      text\n    });\n    console.log(e.target.value);\n  }\n\n  handleChangeColor(e) {\n    e.preventDefault();\n    const color = e.target.value;\n    this.setState({\n      color\n    });\n    console.log(e.target.value);\n  }\n\n  update(e) {\n    e.preventDefault();\n    const id = this.state.id;\n    const title = this.state.title;\n    const text = this.state.text;\n    const color = this.state.color; //let userRef = this.firestore.ref('posts/' + this.props.location.id);\n\n    const databaseRef = fire.database().ref('posts/' + this.props.location.id);\n    const uploadTask = storage.ref(\"/images/\".concat(this.state.image)).put(this.state.image); // this is to get the stat-cards table from firebase\n\n    const statCardsRef = databaseRef.update({\n      title: title,\n      text: text,\n      color: color\n    }).then[() => {\n      console.log('updated!');\n    }];\n\n    console.log(statCardsRef);\n    console.log(\"obrazek: \" + uploadTask); // firestore.Collection('posts').oc(this.props.location.id).update({\n    //   title: title,\n    //   text: text,\n    //   color: color\n    // })\n    //fire.database().ref().child('posts').child('1').set(data);\n\n    console.log(this.props.posts);\n  }\n\n  componentDidUpdate() {\n    console.log(this.props.posts);\n    this.onprops();\n  }\n\n  _handleImageChange(e) {\n    e.preventDefault();\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        imagePreviewUrl: reader.result\n      });\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  render() {\n    //wyśietlanie listy projektów\n    let imagePreviewUrl = this.state.imagePreviewUrl;\n    let $imagePreview = null;\n\n    if (imagePreviewUrl) {\n      $imagePreview = React.createElement(\"img\", {\n        src: imagePreviewUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      });\n    } else {\n      $imagePreview = React.createElement(\"div\", {\n        className: \"previewText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Please select an Image for Preview\");\n    }\n\n    console.log(this.props.location.title);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Edytuj\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Tytu\\u0142\"), React.createElement(\"input\", {\n      type: \"textarea\",\n      value: this.state.title,\n      onChange: this.handleChangeTitle.bind(this),\n      name: \"title\",\n      className: \"form-control\",\n      placeholder: \"Enter title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"small\", {\n      id: \"emailHelp\",\n      className: \"form-text \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"We'll never share your email with anyone else.\")), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"exampleInputPassword1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"tre\\u015B\\u0107\"), React.createElement(\"input\", {\n      value: this.state.text,\n      name: \"name\",\n      onChange: this.handleChangeText.bind(this),\n      type: \"textarea\",\n      className: \"form-control\",\n      id: \"exampleInputPassword1\",\n      placeholder: \"Text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"color\",\n      value: this.state.color,\n      type: \"color\",\n      id: \"myColor\",\n      onChange: this.handleChangeColor.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"fileInput\",\n      type: \"file\",\n      onChange: this.handleImageAsFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.login,\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Usu\\u0144\"), React.createElement(\"div\", {\n      className: \"imgPreview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, $imagePreview), React.createElement(\"button\", {\n      onClick: this.update,\n      style: {\n        marginLeft: '25px'\n      },\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Zmie\\u0144\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts\n  };\n};\n\nconst mapDispatchToProps = {\n  postsFetched\n};\nexport const EditContainer = connect(mapStateToProps, mapDispatchToProps)(Edit);","map":{"version":3,"sources":["C:/npm/moja/src/Edit.js"],"names":["React","Component","postsFetched","connect","storage","fire","base","firestore","Edit","constructor","props","handleImageAsFile","e","console","log","target","files","name","image","setState","file","state","update","bind","url","imagePreviewUrl","posts","currentUser","title","location","text","color","componentWillMount","postsRef","syncState","context","componentDidMount","onprops","handleChangeTitle","preventDefault","value","handleChangeText","handleChangeColor","id","databaseRef","database","ref","uploadTask","put","statCardsRef","then","componentDidUpdate","_handleImageChange","reader","FileReader","onloadend","result","readAsDataURL","render","$imagePreview","login","marginLeft","mapStateToProps","mapDispatchToProps","EditContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,OAAR,EAAiBC,IAAjB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,eAAhD;AAEA,OAAO,MAAMC,IAAN,SAAmBP,SAAnB,CAA6B;AAClCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyBrBC,iBAzBqB,GAyBAC,CAAD,IAAO;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAAT,CAAe,CAAf,EAAkBC,IAA9B;AACA,YAAMC,KAAK,GAAGN,CAAC,CAACG,MAAF,CAASC,KAAT,CAAe,CAAf,CAAd;AACD,WAAKG,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEF;AAAP,OAAd;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKO,KAAL,CAAWH,KAAvB;AACA,KA9BoB;;AAEjB,SAAKI,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd,CAFiB,CAIlB;;AACC,SAAKF,KAAL,GAAa;AACXD,MAAAA,IAAI,EAAC,EADM;AAEXI,MAAAA,GAAG,EAAC,EAFO;AAGXC,MAAAA,eAAe,EAAE,EAHN;AAITC,MAAAA,KAAK,EAAE,EAJE;AAKTC,MAAAA,WAAW,EAAE,IALJ;AAMTC,MAAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWmB,QAAX,CAAoBD,KANlB;AAOTE,MAAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWmB,QAAX,CAAoBC,IAPjB;AAQTC,MAAAA,KAAK,EAAG,KAAKrB,KAAL,CAAWmB,QAAX,CAAoBE;AARnB,KAAb;AAUH;;AAEDC,EAAAA,kBAAkB,GAAE;AAClB,SAAKC,QAAL,GAAgB3B,IAAI,CAAC4B,SAAL,CAAe,OAAf,EAAuB;AACnCC,MAAAA,OAAO,EAAE,IAD0B;AAEnCd,MAAAA,KAAK,EAAE;AAF4B,KAAvB,CAAhB;AAMD;;AAODe,EAAAA,iBAAiB,GAAE,CAGlB;;AACDC,EAAAA,OAAO,GAAE;AACP,QAAI,KAAK3B,KAAL,CAAWmB,QAAX,CAAoBD,KAApB,IAA2B,KAAKP,KAAL,CAAWO,KAA1C,EAAgD;AAChD,YAAMA,KAAK,GAAC,KAAKlB,KAAL,CAAWmB,QAAX,CAAoBD,KAAhC;AACA,YAAME,IAAI,GAAC,KAAKpB,KAAL,CAAWmB,QAAX,CAAoBC,IAA/B;AACA,YAAMC,KAAK,GAAC,KAAKrB,KAAL,CAAWmB,QAAX,CAAoBE,KAAhC;AACA,WAAKZ,QAAL,CAAc;AAAES,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACA,WAAKT,QAAL,CAAc;AAAEW,QAAAA,IAAI,EAAEA;AAAR,OAAd;AACA,WAAKX,QAAL,CAAc;AAAEY,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKO,KAAL,CAAWO,KAAvB;AACC;AACF;;AACDU,EAAAA,iBAAiB,CAAC1B,CAAD,EAAG;AAClBA,IAAAA,CAAC,CAAC2B,cAAF;AAEA,UAAMX,KAAK,GAAGhB,CAAC,CAACG,MAAF,CAASyB,KAAvB;AACA,SAAKrB,QAAL,CAAc;AAACS,MAAAA;AAAD,KAAd;AAGAf,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKO,KAAL,CAAWO,KAAvB;AAED;;AACDa,EAAAA,gBAAgB,CAAC7B,CAAD,EAAG;AACjBA,IAAAA,CAAC,CAAC2B,cAAF;AACA,UAAMT,IAAI,GAAGlB,CAAC,CAACG,MAAF,CAASyB,KAAtB;AAIA,SAAKrB,QAAL,CAAc;AAACW,MAAAA;AAAD,KAAd;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASyB,KAArB;AAGD;;AACDE,EAAAA,iBAAiB,CAAC9B,CAAD,EAAG;AAClBA,IAAAA,CAAC,CAAC2B,cAAF;AACA,UAAMR,KAAK,GAAGnB,CAAC,CAACG,MAAF,CAASyB,KAAvB;AAIA,SAAKrB,QAAL,CAAc;AAACY,MAAAA;AAAD,KAAd;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASyB,KAArB;AAGD;;AACDlB,EAAAA,MAAM,CAACV,CAAD,EAAG;AACPA,IAAAA,CAAC,CAAC2B,cAAF;AACA,UAAMI,EAAE,GAAG,KAAKtB,KAAL,CAAWsB,EAAtB;AACA,UAAMf,KAAK,GAAG,KAAKP,KAAL,CAAWO,KAAzB;AACA,UAAME,IAAI,GAAG,KAAKT,KAAL,CAAWS,IAAxB;AACA,UAAMC,KAAK,GAAG,KAAKV,KAAL,CAAWU,KAAzB,CALO,CAMP;;AACA,UAAMa,WAAW,GAAGvC,IAAI,CAACwC,QAAL,GAAgBC,GAAhB,CAAoB,WAAS,KAAKpC,KAAL,CAAWmB,QAAX,CAAoBc,EAAjD,CAApB;AACA,UAAMI,UAAU,GAAG3C,OAAO,CAAC0C,GAAR,mBAAuB,KAAKzB,KAAL,CAAWH,KAAlC,GAA2C8B,GAA3C,CAA+C,KAAK3B,KAAL,CAAWH,KAA1D,CAAnB,CARO,CAST;;AACA,UAAM+B,YAAY,GAAGL,WAAW,CAACtB,MAAZ,CAAmB;AAEtCM,MAAAA,KAAK,EAAEA,KAF+B;AAGtCE,MAAAA,IAAI,EAAEA,IAHgC;AAItCC,MAAAA,KAAK,EAAEA;AAJ+B,KAAnB,EAKlBmB,IALkB,CAKb,MAAK;AACXrC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KAPoB,CAArB;;AAQCD,IAAAA,OAAO,CAACC,GAAR,CAAYmC,YAAZ;AACApC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAYiC,UAAxB,EAnBQ,CAoBP;AACA;AACA;AACA;AACA;AAGA;;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWgB,KAAvB;AACD;;AACDyB,EAAAA,kBAAkB,GAAE;AAClBtC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWgB,KAAvB;AACA,SAAKW,OAAL;AACA;;AACDe,EAAAA,kBAAkB,CAACxC,CAAD,EAAG;AACpBA,IAAAA,CAAC,CAAC2B,cAAF;AAEA,QAAIc,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACA,QAAIlC,IAAI,GAAGR,CAAC,CAACG,MAAF,CAASC,KAAT,CAAe,CAAf,CAAX;;AAEAqC,IAAAA,MAAM,CAACE,SAAP,GAAmB,MAAM;AACvB,WAAKpC,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAEA,IADM;AAEZK,QAAAA,eAAe,EAAE4B,MAAM,CAACG;AAFZ,OAAd;AAID,KALD;;AAOAH,IAAAA,MAAM,CAACI,aAAP,CAAqBrC,IAArB;AAEA;;AACAsC,EAAAA,MAAM,GAAG;AACL;AADK,QAEAjC,eAFA,GAEmB,KAAKJ,KAFxB,CAEAI,eAFA;AAGL,QAAIkC,aAAa,GAAG,IAApB;;AACA,QAAIlC,eAAJ,EAAqB;AACnBkC,MAAAA,aAAa,GAAI;AAAK,QAAA,GAAG,EAAElC,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB;AACD,KAFD,MAEO;AACLkC,MAAAA,aAAa,GAAI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAjB;AACD;;AACD9C,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWmB,QAAX,CAAoBD,KAAhC;AAEA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADM,EAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,EAEC;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAwB,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWO,KAA1C;AAAiD,MAAA,QAAQ,EAAE,KAAKU,iBAAL,CAAuBf,IAAvB,CAA4B,IAA5B,CAA3D;AAA8F,MAAA,IAAI,EAAC,OAAnG;AAA2G,MAAA,SAAS,EAAC,cAArH;AAAoI,MAAA,WAAW,EAAC,aAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAGC;AAAO,MAAA,EAAE,EAAC,WAAV;AAAsB,MAAA,SAAS,EAAC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAHD,CADA,EAMC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACD;AAAO,MAAA,OAAO,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADC,EAED;AAAO,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWS,IAAzB;AAA+B,MAAA,IAAI,EAAC,MAApC;AAA2C,MAAA,QAAQ,EAAE,KAAKW,gBAAL,CAAsBlB,IAAtB,CAA2B,IAA3B,CAArD;AAAuF,MAAA,IAAI,EAAC,UAA5F;AAAuG,MAAA,SAAS,EAAC,cAAjH;AAAgI,MAAA,EAAE,EAAC,uBAAnI;AAA2J,MAAA,WAAW,EAAC,MAAvK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFC,EAGH;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWU,KAAtC;AAA6C,MAAA,IAAI,EAAC,OAAlD;AAA0D,MAAA,EAAE,EAAC,SAA7D;AAAuE,MAAA,QAAQ,EAAE,KAAKW,iBAAL,CAAuBnB,IAAvB,CAA4B,IAA5B,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHG,CAND,EAWA;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAO,MAAA,SAAS,EAAC,WAAjB;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,QAAQ,EAAE,KAAKZ,iBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAXA,EAgBA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAE,KAAKiD,KAApC;AAA2C,MAAA,SAAS,EAAC,iBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAhBA,EAiBA;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,aADH,CAjBA,EAoBA;AAAQ,MAAA,OAAO,EAAE,KAAKrC,MAAtB;AAA8B,MAAA,KAAK,EAAE;AAACuC,QAAAA,UAAU,EAAE;AAAb,OAArC;AAA2D,MAAA,SAAS,EAAC,iBAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBA,CAFM,CAAR;AA0BH;;AAtKiC;;AAyKpC,MAAMC,eAAe,GAAIzC,KAAD,IAAW;AAEjC,SAAO;AAELK,IAAAA,KAAK,EAAEL,KAAK,CAACK;AAFR,GAAP;AAID,CAND;;AAOA,MAAMqC,kBAAkB,GAAG;AAAE7D,EAAAA;AAAF,CAA3B;AAEA,OAAO,MAAM8D,aAAa,GAAG7D,OAAO,CAAC2D,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CvD,IAA7C,CAAtB","sourcesContent":["import React, { Component } from 'react';\r\nimport { postsFetched } from \"./config/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport {storage, fire  , base, firestore}  from './config/Fire';\r\n\r\nexport class Edit extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.update = this.update.bind(this);\r\n   \r\n   // this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      file:'',\r\n      url:'',\r\n      imagePreviewUrl: '',\r\n        posts: {},\r\n        currentUser: null,\r\n        title: this.props.location.title,\r\n        text: this.props.location.text,\r\n        color:  this.props.location.color\r\n      };\r\n}\r\n\r\ncomponentWillMount(){\r\n  this.postsRef = base.syncState('posts',{\r\n      context: this,\r\n      state: 'posts'\r\n  });\r\n  \r\n  \r\n}\r\nhandleImageAsFile = (e) => {\r\n  console.log(e.target.files[0].name);\r\n  const image = e.target.files[0]\r\n this.setState({file: image})\r\n console.log(this.state.image);\r\n}\r\ncomponentDidMount(){\r\n \r\n\r\n}\r\nonprops(){\r\n  if (this.props.location.title!=this.state.title){\r\n  const title=this.props.location.title;\r\n  const text=this.props.location.text;\r\n  const color=this.props.location.color;\r\n  this.setState({ title: title});\r\n  this.setState({ text: text});\r\n  this.setState({ color: color});\r\n  console.log(this.state.title);\r\n  }\r\n}\r\nhandleChangeTitle(e){\r\n  e.preventDefault();\r\n\r\n  const title = e.target.value;\r\n  this.setState({title});\r\n\r\n\r\n  console.log(this.state.title);\r\n\r\n}\r\nhandleChangeText(e){\r\n  e.preventDefault();\r\n  const text = e.target.value;\r\n \r\n  \r\n\r\n  this.setState({text});\r\n  console.log(e.target.value);\r\n \r\n\r\n}\r\nhandleChangeColor(e){\r\n  e.preventDefault();\r\n  const color = e.target.value;\r\n \r\n  \r\n\r\n  this.setState({color});\r\n  console.log(e.target.value);\r\n \r\n\r\n}\r\nupdate(e){\r\n  e.preventDefault();\r\n  const id = this.state.id;\r\n  const title = this.state.title;\r\n  const text = this.state.text;\r\n  const color = this.state.color;\r\n  //let userRef = this.firestore.ref('posts/' + this.props.location.id);\r\n  const databaseRef = fire.database().ref('posts/'+this.props.location.id);\r\n  const uploadTask = storage.ref(`/images/${this.state.image}`).put(this.state.image);\r\n// this is to get the stat-cards table from firebase\r\nconst statCardsRef = databaseRef.update({\r\n  \r\n  title: title,\r\n  text: text,\r\n  color: color\r\n}).then[()=> {\r\n  console.log('updated!');\r\n}];\r\n console.log(statCardsRef);\r\n console.log(\"obrazek: \"+uploadTask);\r\n  // firestore.Collection('posts').oc(this.props.location.id).update({\r\n  //   title: title,\r\n  //   text: text,\r\n  //   color: color\r\n  // })\r\n  \r\n \r\n  //fire.database().ref().child('posts').child('1').set(data);\r\n  console.log(this.props.posts);\r\n}\r\ncomponentDidUpdate(){\r\n  console.log(this.props.posts);\r\n  this.onprops();\r\n }\r\n _handleImageChange(e){\r\n  e.preventDefault();\r\n\r\n  let reader = new FileReader();\r\n  let file = e.target.files[0];\r\n\r\n  reader.onloadend = () => {\r\n    this.setState({\r\n      file: file,\r\n      imagePreviewUrl: reader.result\r\n    });\r\n  }\r\n\r\n  reader.readAsDataURL(file)\r\n\r\n };\r\n  render() {\r\n      //wyśietlanie listy projektów\r\n      let {imagePreviewUrl} = this.state;\r\n      let $imagePreview = null;\r\n      if (imagePreviewUrl) {\r\n        $imagePreview = (<img src={imagePreviewUrl} />);\r\n      } else {\r\n        $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\r\n      }\r\n      console.log(this.props.location.title);\r\n     \r\n      return (<div>\r\n        <h1>Edytuj</h1>\r\n        <form>\r\n        <div className=\"form-group\">\r\n         <label htmlFor=\"title\">Tytuł</label>\r\n         <input type=\"textarea\"  value={this.state.title} onChange={this.handleChangeTitle.bind(this)} name=\"title\" className=\"form-control\" placeholder=\"Enter title\" />\r\n         <small id=\"emailHelp\" className=\"form-text \">We'll never share your email with anyone else.</small>\r\n        </div>\r\n         <div className=\"form-group\">\r\n        <label htmlFor=\"exampleInputPassword1\">treść</label>\r\n        <input value={this.state.text} name=\"name\" onChange={this.handleChangeText.bind(this)} type=\"textarea\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Text\" />\r\n      <input name=\"color\" value={this.state.color} type=\"color\" id=\"myColor\" onChange={this.handleChangeColor.bind(this)} ></input>\r\n        </div>\r\n        <div className=\"form-group\">\r\n        <input className=\"fileInput\" \r\n            type=\"file\" \r\n            onChange={this.handleImageAsFile} />\r\n            </div>\r\n        <button type=\"submit\" onClick={this.login} className=\"btn btn-primary\">Usuń</button>\r\n        <div className=\"imgPreview\">\r\n          {$imagePreview}\r\n        </div>\r\n        <button onClick={this.update} style={{marginLeft: '25px'}} className=\"btn btn-success\">Zmień</button>\r\n   </form>\r\n   </div>\r\n      )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  \r\n  return {\r\n    \r\n    posts: state.posts\r\n  }\r\n};\r\nconst mapDispatchToProps = { postsFetched };\r\n\r\nexport const EditContainer = connect(mapStateToProps, mapDispatchToProps)(Edit);"]},"metadata":{},"sourceType":"module"}